/*
 * websocket-gateway
 *
 * Describe the websocket endpoints of Qovery
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: erebe@erebe.eu
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PodInErrorValue {
    #[serde(rename = "component_name")]
    pub component_name: String,
    #[serde(rename = "container_name")]
    pub container_name: String,
    #[serde(rename = "level")]
    pub level: models::QoveryComponentContainerStatusLevel,
    #[serde(rename = "message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub message: Option<Option<String>>,
    #[serde(rename = "pod_name")]
    pub pod_name: String,
    #[serde(rename = "reason", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Option<String>>,
    #[serde(rename = "type")]
    pub r#type: String,
}

impl PodInErrorValue {
    pub fn new(component_name: String, container_name: String, level: models::QoveryComponentContainerStatusLevel, pod_name: String, r#type: String) -> PodInErrorValue {
        PodInErrorValue {
            component_name,
            container_name,
            level,
            message: None,
            pod_name,
            reason: None,
            r#type,
        }
    }
}

