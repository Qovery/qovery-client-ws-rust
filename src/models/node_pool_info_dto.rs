/*
 * websocket-gateway
 *
 * Describe the websocket endpoints of Qovery
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: erebe@erebe.eu
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodePoolInfoDto {
    #[serde(rename = "cpu_milli")]
    pub cpu_milli: i64,
    #[serde(rename = "cpu_milli_limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cpu_milli_limit: Option<Option<i64>>,
    #[serde(rename = "memory_mib")]
    pub memory_mib: i64,
    #[serde(rename = "memory_mib_limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub memory_mib_limit: Option<Option<i64>>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "nodes_count")]
    pub nodes_count: i32,
}

impl NodePoolInfoDto {
    pub fn new(cpu_milli: i64, memory_mib: i64, name: String, nodes_count: i32) -> NodePoolInfoDto {
        NodePoolInfoDto {
            cpu_milli,
            cpu_milli_limit: None,
            memory_mib,
            memory_mib_limit: None,
            name,
            nodes_count,
        }
    }
}

