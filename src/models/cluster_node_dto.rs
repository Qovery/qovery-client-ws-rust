/*
 * websocket-gateway
 *
 * Describe the websocket endpoints of Qovery
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: erebe@erebe.eu
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterNodeDto {
    #[serde(rename = "addresses")]
    pub addresses: Vec<models::NodeAddressDto>,
    #[serde(rename = "annotations")]
    pub annotations: std::collections::HashMap<String, String>,
    #[serde(rename = "architecture")]
    pub architecture: String,
    #[serde(rename = "conditions")]
    pub conditions: Vec<models::NodeConditionDto>,
    #[serde(rename = "created_at")]
    pub created_at: i64,
    #[serde(rename = "instance_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<Option<String>>,
    #[serde(rename = "kernel_version")]
    pub kernel_version: String,
    #[serde(rename = "kubelet_version")]
    pub kubelet_version: String,
    #[serde(rename = "labels")]
    pub labels: std::collections::HashMap<String, String>,
    #[serde(rename = "metrics_usage")]
    pub metrics_usage: Box<models::MetricsUsageDto>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "operating_system")]
    pub operating_system: String,
    #[serde(rename = "os_image")]
    pub os_image: String,
    #[serde(rename = "pods")]
    pub pods: Vec<models::NodePodInfoDto>,
    #[serde(rename = "resources_allocatable")]
    pub resources_allocatable: Box<models::NodeResourceDto>,
    #[serde(rename = "resources_allocated")]
    pub resources_allocated: Box<models::NodeResourceAllocatedDto>,
    #[serde(rename = "taints")]
    pub taints: Vec<models::NodeTaintDto>,
    #[serde(rename = "unschedulable")]
    pub unschedulable: bool,
}

impl ClusterNodeDto {
    pub fn new(addresses: Vec<models::NodeAddressDto>, annotations: std::collections::HashMap<String, String>, architecture: String, conditions: Vec<models::NodeConditionDto>, created_at: i64, kernel_version: String, kubelet_version: String, labels: std::collections::HashMap<String, String>, metrics_usage: models::MetricsUsageDto, name: String, operating_system: String, os_image: String, pods: Vec<models::NodePodInfoDto>, resources_allocatable: models::NodeResourceDto, resources_allocated: models::NodeResourceAllocatedDto, taints: Vec<models::NodeTaintDto>, unschedulable: bool) -> ClusterNodeDto {
        ClusterNodeDto {
            addresses,
            annotations,
            architecture,
            conditions,
            created_at,
            instance_type: None,
            kernel_version,
            kubelet_version,
            labels,
            metrics_usage: Box::new(metrics_usage),
            name,
            operating_system,
            os_image,
            pods,
            resources_allocatable: Box::new(resources_allocatable),
            resources_allocated: Box::new(resources_allocated),
            taints,
            unschedulable,
        }
    }
}

